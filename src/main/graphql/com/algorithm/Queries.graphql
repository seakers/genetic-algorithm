

query ProblemObjectivesQuery($problem_id: bigint!, $objective_ids: [bigint!]) {
    items: comet_problem_objective(where: {problem_id: {_eq: $problem_id}, id: {_in: $objective_ids}}, order_by: [{id: asc}]) {
        id
        name
        type
        optimization
        bounds
    }
}


query ProblemDecisionsQuery($problem_id: bigint!) {
    items: comet_problem_decision(where: {problem_id: {_eq: $problem_id}}, order_by: [{id: asc}]) {
        id
        name
        type
        alternatives: comet_problem_alternatives(order_by: [{id: asc}]) {
            id
            value
            description
        }
    }
}


query GaDatasetQuery($problem_id: bigint!) {
    items: comet_problem_dataset(where: {problem_id: {_eq: $problem_id}, name: {_eq: "_ga"}}) {
        id
        name
    }
}


query InitialPopulationQuery($problem_id: bigint!, $dataset_id: bigint!, $objective_ids: [bigint!]) {
    items: comet_problem_architecture(where: {problem_id: {_eq: $problem_id}, dataset_id: {_eq: $dataset_id}}) {
        id
        evaluation_status
        origin
        representation
        objective: comet_problem_objectivevalues(where: {objective_id: {_in: $objective_ids}}) {
            value
            objective_info: comet_problem_objective {
                name
                type
            }
        }
    }
}


query SingleArchitectureQuery($problem_id: bigint!, $representation: String!){
    items: comet_problem_architecture(where: {problem_id: {_eq: $problem_id}, representation: {_eq: $representation}}) {
        id
        evaluation_status
        origin
        representation
        dataset_id
        objective: comet_problem_objectivevalues {
            value
            id
            objective_id
            explanation
            objective_info: comet_problem_objective {
                name
                type
            }
        }
    }
}

query DoesDesignExistQuery($problem_id: bigint!, $representation: String!, $dataset_id: bigint!){
    result: comet_problem_architecture_aggregate(where: {dataset_id: {_eq: $dataset_id}, representation: {_eq: $representation}, problem_id: {_eq: $problem_id}}) {
        aggregate {
            count
        }
    }
}









mutation CopyArchitectureMutation($problem_id: bigint!, $user_dataset_id: bigint!,  $evaluation_status: Boolean!, $origin: String!, $user_info_id: bigint!, $representation: String!, $objective_values: [comet_problem_objectivevalue_insert_input!]!){
    items: insert_comet_problem_architecture_one(object: {dataset_id: $user_dataset_id, evaluation_status: $evaluation_status, origin: $origin, problem_id: $problem_id, representation: $representation, user_information_id: $user_info_id, comet_problem_objectivevalues: {data: $objective_values}}) {
        id
    }
}

mutation CopyArchitectureBatchMutation($architectures: [comet_problem_architecture_insert_input!]!) {
    items: insert_comet_problem_architecture(objects: $architectures) {
        returning {
            id
        }
    }
}







# --> Not Implemented yet, use query with timeout
#subscription SingleArchitectureSubscription($problem_id: bigint!, $dataset_id: bigint!, $objective_ids: [bigint!], $representation: String!){
#    items: comet_problem_architecture(where: {problem_id: {_eq: $problem_id}, dataset_id: {_eq: $dataset_id}, representation: {_eq: $representation}}) {
#        id
#        evaluation_status
#        origin
#        representation
#        objective: comet_problem_objectivevalues(where: {objective_id: {_in: $objective_ids}}) {
#            value
#            objective_info: comet_problem_objective {
#                name
#                type
#            }
#        }
#    }
#}


#
#
#query ArchitectureSubscription($problem_id: Int!, $dataset_id: Int!, $input: String!) {
#  architecture: Architecture_aggregate(where: {problem_id: {_eq: $problem_id}, dataset_id: {_eq: $dataset_id}, input: {_eq: $input}, ga: {_eq: true}}) {
#    aggregate {
#      count
#    }
#  }
#}
#
#
#query SingleArchitecture($problem_id: Int!, $dataset_id: Int!, $input: String!) {
#    items: Architecture (where: {problem_id: {_eq: $problem_id}, dataset_id: {_eq: $dataset_id}, input: {_eq: $input}})  {
#        id input science cost
#    }
#}
#
#
#query Architecture($problem_id: Int!, $dataset_id: Int!) {
#    items: Architecture(where: {problem_id: {_eq: $problem_id}, dataset_id: {_eq: $dataset_id}, eval_status: {_eq: true}}) {
#        id
#        input
#        science
#        cost
#    }
#}
#
#mutation MarkArchitectureAsImprovingHV($id: Int! = 10) {
#  update_Architecture_by_pk(pk_columns: {id: $id}, _set: {improve_hv: true}) {
#    id
#    improve_hv
#  }
#}
#
#mutation DeleteNonImprovingArchitectures($dataset_id: Int = 10) {
#  delete_SubobjectiveScoreExplanation(where: {Architecture: {dataset_id: {_eq: $dataset_id}, ga: {_eq: true}, improve_hv: {_eq: false}}}) {
#    affected_rows
#  }
#  delete_ObjectiveScoreExplanation(where: {Architecture: {dataset_id: {_eq: $dataset_id}, ga: {_eq: true}, improve_hv: {_eq: false}}}) {
#    affected_rows
#  }
#  delete_PanelScoreExplanation(where: {Architecture: {dataset_id: {_eq: $dataset_id}, ga: {_eq: true}, improve_hv: {_eq: false}}}) {
#    affected_rows
#  }
#  delete_ArchitectureScoreExplanation(where: {Architecture: {dataset_id: {_eq: $dataset_id}, ga: {_eq: true}, improve_hv: {_eq: false}}}) {
#    affected_rows
#  }
#  delete_ArchitectureBudget(where: {ArchitectureCostInformation: {Architecture: {dataset_id: {_eq: $dataset_id}, ga: {_eq: true}, improve_hv: {_eq: false}}}}) {
#    affected_rows
#  }
#  delete_ArchitecturePayload(where: {ArchitectureCostInformation: {Architecture: {dataset_id: {_eq: $dataset_id}, ga: {_eq: true}, improve_hv: {_eq: false}}}}) {
#    affected_rows
#  }
#  delete_ArchitectureCostInformation(where: {Architecture: {dataset_id: {_eq: $dataset_id}, ga: {_eq: true}, improve_hv: {_eq: false}}}) {
#    affected_rows
#  }
#  delete_Architecture(where: {dataset_id: {_eq: $dataset_id}, improve_hv: {_eq: false}, ga: {_eq: true}}) {
#    affected_rows
#  }
#}
